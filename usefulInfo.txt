Compile with nvcc:
	nvcc --compiler-options "-std=c++11" -I include/ src/bitecoin_miner.cpp

Compile test stuff:
1st compile cuda code, cudaTest.cu with

	nvcc -c -I include/cudaInc/ src/test/cudaTest.cu

2nd, compile main code (which calls the cuda code), cudaTest.cpp with

	g++ -o program -I include/cudaInc/ -I /opt/cuda/include/ src/test/cudaTest.cpp cudaTest.o -L /opt/cuda/lib64/ -lcuda -lcudart

Run and Build on DoC
g++ -o cudaTest -I include/cudaInc/ src/test/cudaTest.cpp cudaTest.o -L /usr/lib/nvidia-331/ -L /usr/local/cuda/lib64/ -lcuda -lcudart


bitecoin_protocol.hpp
---
BIGINT_LENGTH = 32;
BIGINT_WORDS = BIGINT_LENGTH/4 = 8;

uint64_t roundId;				// unique id associated with this round.
uint64_t roundSalt;				// Random value chosen by the server
std::vector<uint8_t> chainData;	// Chain data. On the wire consists of 64-bit length, followed by bytes of chain data
uint32_t maxIndices;			// Maximum indices to return 
uint32_t c[BIGINT_WORDS/2];		// Constant to use during hashing
uint32_t hashSteps;

bitecoin_hashing.hpp
---
NLIMBS = BIGINT_WORDS = 8;

struct bigint_t
{
	uint32_t limbs[NLIMBS]; = uint32_t[8]
};
